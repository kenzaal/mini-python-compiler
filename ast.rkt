#lang racket/base

(provide (all-defined-out))

(struct Pval       (val)             #:transparent)
(struct Pop        (op v1 v2)        #:transparent)
(struct Pid        (name)            #:transparent)
(struct Pdef       (id expr)         #:transparent)
(struct Pcond      (test yes no)     #:transparent)
(struct Pprint     (expr)            #:transparent)
(struct Pprint_op  (expr)            #:transparent)
(struct Pprint_var (expr)            #:transparent)
(struct Pbool     (bool)            #:transparent)
(struct Pnot      (op v)            #:transparent)
(struct Ploop     (test instr)      #:transparent)
(struct Pfunc     (id args expr)    #:transparent)
(struct Pfuncall  (id args)         #:transparent)

;;;;; MIPS
(struct Move (rd rs))
(struct Li (r i))
(struct La (r a))
(struct Addi (rd rs i))
(struct Add (rd rs r))
(struct Sub (rd rs i))
(struct Mult (r1 r2))
(struct Div (r1 r2))
(struct Mflo (r))
(struct Mfhi (r))
(struct Sw (r loc))
(struct Lw (r loc))
(struct Syscall ())
(struct Jr (r))
(struct J (r))
(struct Jal (r))
(struct Beq (r1 r2 lbl))
(struct Bgt (r1 r2 lbl))
(struct Blt (r1 r2 lbl))
(struct Bge (r1 r2 lbl))
(struct Ble (r1 r2 lbl))
(struct B (lbl))
(struct Label (l))
(struct And(rd r1 r2))
(struct Or(rd r1 r2))
(struct Xor(rd r1 r2))

;; addresses
(struct Lbl (l))   ;; label (souvent présent dans .data)
(struct Mem (b r)) ;; emplacement mémoire à l'adresse b + valeur du registre r

